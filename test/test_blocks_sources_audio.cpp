// (c) 2016 Neeraj Sharma <neeraj.sharma@alumni.iitg.ernet.in>
// see LICENSE for license

#include "../common/MemInputStream.h"
#include "../common/Port.h"
#include "../blocks/sources/AudioSource.h"
#include "../blocks/sinks/ArchiverSink.h"

#include "catch.hpp"

using namespace sigblocks;


TEST_CASE("Testing block audio source for 8KHz 16-bit signed PCM, stereo signal", "[audio source]") {
    // sample wav file, microsoft wav, 8KHz sampling freq, 16-bit signed PCM, stereo
    // overall bit rate is 256kbps.
    //
    // Note that the following command generated this input data:
    //   xxd -i sample1.wav
    //
    unsigned char sample1_wav[] = {
            0x52, 0x49, 0x46, 0x46, 0xc8, 0x02, 0x00, 0x00, 0x57, 0x41, 0x56, 0x45,
            0x66, 0x6d, 0x74, 0x20, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00,
            0x40, 0x1f, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x04, 0x00, 0x10, 0x00,
            0x64, 0x61, 0x74, 0x61, 0xa4, 0x02, 0x00, 0x00, 0xbb, 0xea, 0xbb, 0xea,
            0x6a, 0x14, 0x6a, 0x14, 0x0b, 0xf3, 0x0b, 0xf3, 0x27, 0xfe, 0x27, 0xfe,
            0xc1, 0xfa, 0xc1, 0xfa, 0xbe, 0x12, 0xbe, 0x12, 0x3b, 0x10, 0x3b, 0x10,
            0x6a, 0xf5, 0x6a, 0xf5, 0xa3, 0xfd, 0xa3, 0xfd, 0x93, 0x03, 0x93, 0x03,
            0xc1, 0x07, 0xc1, 0x07, 0x0f, 0xea, 0x0f, 0xea, 0x70, 0xff, 0x70, 0xff,
            0x78, 0xff, 0x78, 0xff, 0x33, 0x0d, 0x33, 0x0d, 0xbf, 0xfa, 0xbf, 0xfa,
            0x8d, 0xfc, 0x8d, 0xfc, 0x31, 0x14, 0x31, 0x14, 0x76, 0xfa, 0x76, 0xfa,
            0x34, 0x04, 0x34, 0x04, 0x2f, 0xf4, 0x2f, 0xf4, 0xdc, 0xf9, 0xdc, 0xf9,
            0x6d, 0x0c, 0x6d, 0x0c, 0xda, 0xf7, 0xda, 0xf7, 0x0a, 0xfe, 0x0a, 0xfe,
            0xb0, 0x03, 0xb0, 0x03, 0xb4, 0x0a, 0xb4, 0x0a, 0x2c, 0x01, 0x2c, 0x01,
            0xb9, 0xfb, 0xb9, 0xfb, 0x56, 0x01, 0x56, 0x01, 0x09, 0xf9, 0x09, 0xf9,
            0x79, 0xf8, 0x79, 0xf8, 0x49, 0x03, 0x49, 0x03, 0x80, 0xfa, 0x80, 0xfa,
            0x73, 0x09, 0x73, 0x09, 0xd1, 0x0d, 0xd1, 0x0d, 0x14, 0x03, 0x14, 0x03,
            0xb9, 0xec, 0xb9, 0xec, 0xec, 0xfc, 0xec, 0xfc, 0x1b, 0x06, 0x1b, 0x06,
            0xa6, 0xee, 0xa6, 0xee, 0x55, 0x03, 0x55, 0x03, 0x5d, 0xf7, 0x5d, 0xf7,
            0x08, 0x17, 0x08, 0x17, 0x3f, 0x06, 0x3f, 0x06, 0x13, 0xf8, 0x13, 0xf8,
            0x60, 0x02, 0x60, 0x02, 0x40, 0x02, 0x40, 0x02, 0xda, 0x03, 0xda, 0x03,
            0xae, 0xe7, 0xae, 0xe7, 0xb3, 0x01, 0xb3, 0x01, 0x22, 0xff, 0x22, 0xff,
            0xcc, 0x08, 0xcc, 0x08, 0xbd, 0xfc, 0xbd, 0xfc, 0xe2, 0xfc, 0xe2, 0xfc,
            0x38, 0x10, 0x38, 0x10, 0x37, 0xff, 0x37, 0xff, 0xac, 0x00, 0xac, 0x00,
            0x9b, 0xf0, 0x9b, 0xf0, 0x8b, 0xff, 0x8b, 0xff, 0xfc, 0x07, 0xfc, 0x07,
            0x9c, 0xf8, 0x9c, 0xf8, 0x42, 0xfa, 0x42, 0xfa, 0x8d, 0x06, 0x8d, 0x06,
            0x1e, 0x0d, 0x1e, 0x0d, 0xae, 0x02, 0xae, 0x02, 0xa4, 0xf6, 0xa4, 0xf6,
            0x9d, 0xff, 0x9d, 0xff, 0xf5, 0xfa, 0xf5, 0xfa, 0xad, 0xf9, 0xad, 0xf9,
            0x3f, 0x02, 0x3f, 0x02, 0x5d, 0xfa, 0x5d, 0xfa, 0xc6, 0x0f, 0xc6, 0x0f,
            0x9d, 0x0f, 0x9d, 0x0f, 0x76, 0xef, 0x76, 0xef, 0xf4, 0xe8, 0xf4, 0xe8,
            0x9d, 0x1a, 0x9d, 0x1a, 0xdd, 0xe7, 0xdd, 0xe7, 0xc0, 0x00, 0xc0, 0x00,
            0x29, 0xf6, 0x29, 0xf6, 0x44, 0x0e, 0x44, 0x0e, 0x4e, 0x14, 0x4e, 0x14,
            0x38, 0xef, 0x38, 0xef, 0x48, 0x04, 0x48, 0x04, 0xb2, 0x03, 0xb2, 0x03,
            0x89, 0x03, 0x89, 0x03, 0x0c, 0xf6, 0x0c, 0xf6, 0x9f, 0xf0, 0x9f, 0xf0,
            0x14, 0x01, 0x14, 0x01, 0xb4, 0x0d, 0xb4, 0x0d, 0x24, 0xf5, 0x24, 0xf5,
            0x69, 0x01, 0x69, 0x01, 0x72, 0x08, 0x72, 0x08, 0xcf, 0xfd, 0xcf, 0xfd,
            0x9a, 0x09, 0x9a, 0x09, 0xb9, 0xf6, 0xb9, 0xf6, 0xe6, 0xf5, 0xe6, 0xf5,
            0xd7, 0x05, 0xd7, 0x05, 0x4b, 0xfe, 0x4b, 0xfe, 0x97, 0xfd, 0x97, 0xfd,
            0x63, 0xfb, 0x63, 0xfb, 0x16, 0x09, 0x16, 0x09, 0x7f, 0x07, 0x7f, 0x07,
            0xba, 0x02, 0xba, 0x02, 0x02, 0xf6, 0x02, 0xf6, 0x83, 0xfe, 0x83, 0xfe,
            0xd0, 0xfe, 0xd0, 0xfe, 0x5f, 0xfe, 0x5f, 0xfe, 0xe3, 0xf8, 0xe3, 0xf8,
            0x1c, 0x06, 0x1c, 0x06, 0x3f, 0x16, 0x3f, 0x16, 0x35, 0xf4, 0x35, 0xf4,
            0xe3, 0xe6, 0xe3, 0xe6, 0x49, 0x1e, 0x49, 0x1e, 0xbe, 0xed, 0xbe, 0xed,
            0xf2, 0x05, 0xf2, 0x05, 0xe5, 0xf1, 0xe5, 0xf1, 0x79, 0x0c, 0x79, 0x0c,
            0x28, 0x19, 0x28, 0x19, 0xa8, 0xf7, 0xa8, 0xf7, 0x84, 0xf8, 0x84, 0xf8,
            0xaa, 0x04, 0xaa, 0x04, 0x1b, 0x10, 0x1b, 0x10, 0xf5, 0xec, 0xf5, 0xec,
            0x75, 0x01, 0x75, 0x01, 0x4e, 0xf5, 0x4e, 0xf5, 0x71, 0x0c, 0x71, 0x0c,
            0xa8, 0x06, 0xa8, 0x06, 0xc3, 0xf3, 0xc3, 0xf3, 0x65, 0x09, 0x65, 0x09,
            0x69, 0x00, 0x69, 0x00, 0xfb, 0x03, 0xfb, 0x03, 0xea, 0xfe, 0xea, 0xfe,
            0xba, 0xf8, 0xba, 0xf8, 0x84, 0xfe, 0x84, 0xfe, 0xd8, 0x05, 0xd8, 0x05,
            0xa8, 0xfb, 0xa8, 0xfb, 0xba, 0xfd, 0xba, 0xfd, 0x7a, 0x05, 0x7a, 0x05,
            0x7f, 0x05, 0x7f, 0x05, 0x8b, 0x06, 0x8b, 0x06, 0x2e, 0xf7, 0x2e, 0xf7,
            0x70, 0xf2, 0x70, 0xf2, 0x2a, 0x07, 0x2a, 0x07, 0x5a, 0x07, 0x5a, 0x07,
            0x73, 0xf2, 0x73, 0xf2, 0x67, 0x08, 0x67, 0x08, 0x1a, 0x11, 0x1a, 0x11,
            0xf6, 0xdf, 0xf6, 0xdf, 0x3b, 0x0d, 0x3b, 0x0d, 0x84, 0xf7, 0x84, 0xf7,
            0x68, 0xf9, 0x68, 0xf9, 0xaf, 0x05, 0xaf, 0x05, 0xe4, 0xf7, 0xe4, 0xf7,
            0x61, 0x0d, 0x61, 0x0d, 0xd0, 0x09, 0xd0, 0x09, 0x88, 0xf9, 0x88, 0xf9,
            0xdb, 0xfe, 0xdb, 0xfe, 0x56, 0x06, 0x56, 0x06, 0xbb, 0xfa, 0xbb, 0xfa,
            0xdd, 0xf9, 0xdd, 0xf9, 0xcc, 0xf8, 0xcc, 0xf8, 0x26, 0xfb, 0x26, 0xfb,
            0x18, 0x08, 0x18, 0x08, 0x1b, 0xfe, 0x1b, 0xfe, 0x16, 0x03, 0x16, 0x03,
            0xc5, 0xfd, 0xc5, 0xfd, 0x7c, 0x04, 0x7c, 0x04, 0xaf, 0xff, 0xaf, 0xff
    };
    unsigned int sample1_wav_len = 720;
    assert(sample1_wav_len == sizeof(sample1_wav));
    size_t total_num_data_bytes = sizeof(sample1_wav);

    MemInputStream mem_instream(reinterpret_cast<char*>(&sample1_wav[0]), total_num_data_bytes);
    std::unique_ptr<std::istream> input_stream(new std::istream(&mem_instream));

    int block_size = 2;
    std::shared_ptr<IPort<short> > source(new AudioSource<short>("audio-1", block_size, std::move(input_stream)));
    std::shared_ptr<IPort<short> > sink(new ArchiverSink<short>("archiver-1"));
    ArchiverSink<short>* archive = dynamic_cast<ArchiverSink<short>*>(sink.get());

    connect(source, sink);

    REQUIRE(source);
    REQUIRE(sink);
    REQUIRE(archive);

    TimeTick timeTick(1);
    source->ClockCycle(timeTick);

    REQUIRE(archive->GetScalarInfo().empty());
    REQUIRE(archive->GetVectorInfo().empty());
    REQUIRE(archive->GetMatrixInfo().size() == 1);
    REQUIRE(archive->GetMatrixInfo().front().mTimeTick == timeTick);

    // for PCM WAV format header is of size 44 octets
    const int data_sample_start_offset = 44;
    // num_channel * block_size
    int len = 2 * block_size;

    for (int i = 0; i < len; ++i) {
        // the data sample is of 16-bits signed PCM and encoded as
        // little-endian so derive the expected_result accordingly
        short expected_result =
                sample1_wav[data_sample_start_offset + (i * 2)] |
                (sample1_wav[data_sample_start_offset + (i*2 + 1)] << 8);
        REQUIRE(archive->GetMatrixInfo().front().mData.get()[i] == expected_result);
    }
}