{"name":"Signalblocks","tagline":"A c++ framework to implement blocks of logic which can be tied together (in chains)","body":"### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\nThe SignalBlocks is a c++ framework to implement blocks of\r\nlogic which can be tied together like digital signal processing\r\n(DSP) blocks (as in Matlab). This toolset aims to be fast, adaptable\r\nand free (GPLv3 license) for the student/research community.\r\n\r\nPlease note that this is a humble attempt (no way complete) to\r\ngive a framework which is (probably) useful to the scientific\r\ncommunity.\r\n\r\nThe c++ can appear daunting for newbies but I strive to make those\r\nas simple possible in the future. Additionally, there are so many\r\nopensource libraries available which I intend to reuse for much faster\r\ndevelopment.\r\n\r\n    I know that the sample code is a lot cryptic at present,\r\n    but I plan to change all that once I get free time.\r\n\r\n\r\n> (c) 2014 Neeraj Sharma <neeraj.sharma@alumni.iitg.ernet.in>\r\n> see LICENSE for license\r\n\r\n### Roadmap\r\n\r\n\r\n1. c++ blocks for a fast yet easy to use software modules for a\r\n   generic processing. The idea is to have a basic framework\r\n   which will use a lot of opensource libariries to present\r\n   a blockset for mathematical (and probably more).\r\n2. graphical based approach where users will use blocks as\r\n   drag an drop, while the c++ engine is running in the\r\n   background (more like Matlab Simulink).\r\n3. Have some more thoughts but none mature enough to state\r\n   yet.\r\n\r\n\r\n### Motivation\r\n\r\nI was always facinated by Matlab power and ease of use while in\r\ncollege and wanted to implement something similar but in a language\r\nwhich can be compiled to native format for blazingly fast performance.\r\nThis project is an attempt to give a basic frameowork which will (soon)\r\nencapsulate many of the open source software to construct a building\r\nblock for such requirement.\r\n\r\n### Blocks\r\n\r\n    (inspired from matlab-simulink)\r\n    blocks:\r\n\r\n    constant (source of constant number)\r\n    demux (one to many)\r\n    summation (add values received so far)\r\n    gain (multiply input with a constant factor)\r\n    logical AND (output is boolean type)\r\n    mux (many to one)\r\n    product (multiply x and y giving z as output)\r\n    relational operation (ex. <= on inputs x,y and give boolean output)\r\n    saturation (with upper and lower limit)\r\n    sum (x+y = z)\r\n    switch (pass ip1 when ip2 satisfies some criteria (>= threshold) else pass ip3 to op1)\r\n    terminator (dummy output port)\r\n    delay (with some initial condition which is the initial output till delay is reached for first output)\r\n    quantizer (quantization interval (ex. 0.5) is fixed at start and input is divided by that to get integer output)\r\n    wrap to zero (if the input > threshold then output = 0, else output = input)\r\n    difference (have fixed initial condition, y(n) = x(n) - x(n-1)\r\n    buffer (convert serial data to a buffer of given size)\r\n    nbuffer (convert serial data to a buffer of length N where N is within a given set and repeats over and over) - TODO\r\n    serialize (convert buffer to serial data, or send one-by-one to the connected peer)\r\n    downsample (filter data to down-sample input stream of data)\r\n    upsample (filter data to up-sample the input stream and insert 0s) - TODO\r\n\r\n### TODO\r\n\r\n* Make mutex optional, which will speedup single-threaded operations.\r\n  How about having a ifdef like DISABLE_MUTEX or something?\r\n* Enable Port vector operations\r\n* Think about removing the generic list operation (i.e. std::list)\r\n  in favour of vector\r\n* Include a bulk of Gnu Scientific Library vector operations\r\n* Enable Port matrix operations\r\n* Include matrix operations provided by GSL\r\n* Test all socket operations tcp, udp, udplite and sctp\r\n* Enhance bulk of functionality with unit tests\r\n\r\n### Thanks\r\n\r\nI have a lot of strategies to make this library even more useful to\r\nstudents/researchers, while this is one humble attempt to go\r\none step closer towards the final goal.\r\n\r\nPlease write comments / send me an email since a lot needs to be\r\nachieved and this is just the beginning.\r\n\r\n### Authors and Contributors\r\n\r\n@neeraj9\r\n\r\n### Support or Contact\r\n\r\nCreate an issue or get in touch with @neeraj9.\r\n","google":"UA-19978976-6","note":"Don't delete this file! It's used internally to help with page regeneration."}